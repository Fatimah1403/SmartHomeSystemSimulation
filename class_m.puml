@startuml
' Complete Class Diagram for Smart Home System (Final Implementation)

' === CORE FACADE LAYER ===
class FacadeSmartHome {
    - instance: FacadeSmartHome
    - smartHome: SmartHome
    - devices: List<SmartDevice>
    - eventSystem: EventSystem
    - commandHistory: List<String>
    - concurrentRules: List<Rule>
    + getTheInstance(): FacadeSmartHome
    + smartHomeAccess(command: String, deviceName: String, value: String): String
    + addDevice(device: SmartDevice): void
    + loadDevice(device: SmartDevice): void
    + removeDevice(deviceName: String): boolean
    + getDevices(): List<SmartDevice>
    + getDevice(name: String): Optional<SmartDevice>
    + addConcurrentRule(rule: Rule): void
    + getConcurrentRules(): List<Rule>
    + getEventSystem(): EventSystem
    + reset(): void
    + shutdown(): void
}

' === CORE SMART HOME ===
class SmartHome {
    - deviceManager: DeviceManager
    - dbService: DatabaseService
    - securityService: SecurityService
    - lightAutomationRule: LightAutomationRule
    + addDevice(device: SmartDevice): void
    + getDevices(): List<SmartDevice>
    + reportStatus(): String
    + runAutomation(): String
    + saveDevice(device: SmartDevice): void
    + clearLogFile(): String
    + getHistory(): String
}

class DeviceManager {
    - devices: List<T extends SmartDevice & Controllable>
    - dbService: DatabaseService
    - securityService: SecurityService
    + addDevice(device: T): void
    + saveDevice(device: T): void
    + getDevices(): List<T>
    + removeDevice(deviceName: String): boolean
}

' === CLI INTERFACES ===
class SmartHomeCLI {
    - facade: FacadeSmartHome
    - scanner: Scanner
    - persistenceService: PersistenceService
    - concurrentCommands: ConcurrentCLICommands
    - executorService: ExecutorService
    - useColors: boolean
    - running: boolean
    + main(args: String[]): void
    + start(): void
    + showInterfaceSelection(): void
    + launchGUI(): void
    - executeCommand(parts: String[]): void
    - handleAutomation(parts: String[]): void
    - handleAdd(parts: String[]): void
    - handleToggle(parts: String[]): void
    - handleSave(): void
    - handleLoad(): void
    - printHelp(): void
}

class ConcurrentCLICommands {
    - facade: FacadeSmartHome
    - eventSystem: EventSystem
    - automationEngine: AutomationEngine
    - deviceMonitor: DeviceMonitor
    - powerMonitor: PowerMonitoringService
    - deviceFactory: ConcurrentDeviceFactory
    - asyncExecutor: ExecutorService
    + processConcurrentCommand(command: String): boolean
    + getConcurrentHelp(): String
    + shutdown(): void
    - handleAutomateCommand(parts: String[]): boolean
    - handleEventsCommand(parts: String[]): boolean
    - handleMonitorCommand(parts: String[]): boolean
    - handlePowerCommand(parts: String[]): boolean
}

' === CONCURRENT SYSTEMS ===
class EventSystem {
    - listeners: Map<EventType, Set<EventListener>>
    - allEventListeners: Set<EventListener>
    - dispatcher: ExecutorService
    - running: AtomicBoolean
    - eventCount: AtomicLong
    - eventHistory: List<Event>
    + subscribe(type: EventType, listener: EventListener): void
    + subscribeToAll(listener: EventListener): void
    + publishEvent(event: Event): void
    + start(): void
    + stop(): void
    + getStatistics(): String
    + getRecentEvents(count: int): List<Event>
}

class AutomationEngine {
    - facade: FacadeSmartHome
    - scheduler: ScheduledExecutorService
    - ruleExecutor: ExecutorService
    - rules: List<ConcurrentRule>
    - scheduledTasks: Map<String, ScheduledFuture<?>>
    + addRule(rule: ConcurrentRule): void
    + start(): void
    + stop(): void
    + getStatus(): String
    - evaluateRules(): void
}

class DeviceMonitor {
    - facade: FacadeSmartHome
    - eventSystem: EventSystem
    - intervalMillis: long
    - scheduler: ScheduledExecutorService
    - running: AtomicBoolean
    - deviceStats: Map<String, DeviceStats>
    + startMonitoring(): void
    + stopMonitoring(): void
    + isRunning(): boolean
    + getDeviceStats(deviceName: String): String
    + getSystemStatus(): String
}

class PowerMonitoringService {
    - facade: FacadeSmartHome
    - eventSystem: EventSystem
    - scheduler: ScheduledExecutorService
    - running: AtomicBoolean
    - powerThreshold: AtomicInteger
    - devicePowerUsage: Map<String, Integer>
    + startMonitoring(): void
    + stopMonitoring(): void
    + setPowerThreshold(watts: int): void
    + optimizePowerUsage(targetWatts: int): CompletableFuture<String>
    + getPowerStatistics(): String
    + calculateTotalPowerUsage(): int
}

' === DEVICE HIERARCHY ===
abstract class SmartDevice {
    - name: String
    - isOn: boolean
    - location: String
    + SmartDevice(name: String)
    + turnOn(): void
    + turnOff(): void
    + isOn(): boolean
    + getName(): String
    + getStatus(): String
    + getLocation(): String
    + setLocation(location: String): void
}

interface Controllable {
    + turnOn(): void
    + turnOff(): void
    + getStatus(): String
    + getName(): String
}

' Standard Devices
class Light {
    + Light(name: String)
    + turnOn(): void
    + turnOff(): void
    + getStatus(): String
}

class Thermostat {
    - temperature: int
    + Thermostat(name: String)
    + turnOn(): void
    + turnOff(): void
    + setTemperature(temp: int): void
    + getTemperature(): int
    + getStatus(): String
}

class SecurityCamera {
    + SecurityCamera(name: String)
    + turnOn(): void
    + turnOff(): void
    + getStatus(): String
}

' Concurrent Devices
interface ConcurrentSmartDevice {
    + isOperational(): boolean
    + simulateMalfunction(): void
    + getEventSystem(): EventSystem
}

class ConcurrentLight {
    - eventSystem: EventSystem
    - operational: AtomicBoolean
    + ConcurrentLight(name: String, eventSystem: EventSystem)
    + turnOn(): void
    + turnOff(): void
    + isOperational(): boolean
    + simulateMalfunction(): void
    + getStatus(): String
}

class ConcurrentThermostat {
    - temperature: AtomicInteger
    - eventSystem: EventSystem
    - operational: AtomicBoolean
    + ConcurrentThermostat(name: String, eventSystem: EventSystem)
    + setTemperature(temp: int): void
    + getTemperature(): int
    + simulateTemperatureDrift(): void
    + isOperational(): boolean
    + simulateMalfunction(): void
    + getStatus(): String
}

class ConcurrentSecurityCamera {
    - eventSystem: EventSystem
    - operational: AtomicBoolean
    + ConcurrentSecurityCamera(name: String, eventSystem: EventSystem)
    + detectMotion(): void
    + isOperational(): boolean
    + simulateMalfunction(): void
    + getStatus(): String
}

' === AUTOMATION SYSTEMS ===
' Visitor Pattern (Original)
interface AutomationRule {
    + visit(device: SmartDevice): void
}

class LightAutomationRule {
    + visit(device: SmartDevice): void
}

' Concurrent Rules
interface ConcurrentRule {
    + getName(): String
    + shouldExecute(): boolean
    + execute(devices: List<SmartDevice>): void
}

interface Rule {
    + getName(): String
    + execute(facade: FacadeSmartHome): void
    + getStatus(): String
}

class SecurityRule {
    - name: String
    - lastExecution: LocalDateTime
    + SecurityRule(name: String)
    + getName(): String
    + shouldExecute(): boolean
    + execute(devices: List<SmartDevice>): void
}

class TemperatureRule {
    - name: String
    - targetTemperature: int
    - tolerance: int
    - lastExecution: LocalDateTime
    + TemperatureRule(name: String, temp: int, tolerance: int)
    + getName(): String
    + shouldExecute(): boolean
    + execute(devices: List<SmartDevice>): void
}

class TimeBasedRule {
    - name: String
    - triggerTime: LocalTime
    - action: Runnable
    - lastExecution: LocalDateTime
    + TimeBasedRule(name: String, time: LocalTime, action: Runnable)
    + getName(): String
    + shouldExecute(): boolean
    + execute(devices: List<SmartDevice>): void
}

' === CONFIGURATION ===
class AutomationRuleConfig {
    - ruleName: String
    - ruleType: String
    - isActive: boolean
    - targetDevices: List<String>
    - conditions: List<Condition>
    - actions: List<Action>
    + AutomationRuleConfig(ruleName: String, ruleType: String)
}

class Condition {
    - type: String
    - operator: String
    - value: String
    + Condition(type: String, operator: String, value: String)
}

class Action {
    - deviceName: String
    - command: String
    - parameter: String
    + Action(deviceName: String, command: String, parameter: String)
}

' === EVENTS ===
class Event {
    - type: EventType
    - source: String
    - data: Map<String, String>
    - timestamp: LocalDateTime
    + Event(type: EventType, source: String, data: Map, timestamp: LocalDateTime)
    + getType(): EventType
    + getSource(): String
    + getData(): Map<String, String>
    + getTimestamp(): LocalDateTime
}

enum EventType {
    DEVICE_STATE_CHANGED
    MOTION_DETECTED
    TEMPERATURE_CHANGED
    POWER_THRESHOLD_EXCEEDED
    DEVICE_MALFUNCTION
    AUTOMATION_EXECUTED
    SYSTEM_STARTED
    SYSTEM_STOPPED
}

interface EventListener {
    + onEvent(event: Event): void
    + getName(): String
}

' === PERSISTENCE & SERVICES ===
class PersistenceService {
    - databaseService: DatabaseService
    - useDatabasePrimary: boolean
    + saveAllDevices(devices: List<SmartDevice>): void
    + saveDeviceStatesBinary(devices: List<SmartDevice>): void
    + saveDeviceStatesJson(devices: List<SmartDevice>): void
    + saveDeviceStatesToDatabase(devices: List<SmartDevice>): void
    + loadDevicesDirectly(): List<SmartDevice>
    + loadDeviceStatesBinary(): List<DeviceState>
    + loadDeviceStatesJson(): List<DeviceState>
    + isDatabaseAvailable(): boolean
    + logDeviceAction(device: SmartDevice, action: String): void
    + getSystemSummary(): String
    + getDeviceStatistics(deviceName: String): String
}

class DatabaseService {
    - connection: Connection
    + save(device: SmartDevice): void
    + load(): List<SmartDevice>
    + clearLogFile(): void
    + readLogFile(): List<String>
    + isAvailable(): boolean
}

class SecurityService {
    + checkSecurity<T extends SmartDevice & Controllable>(devices: List<T>): String
    + validateDevice(device: SmartDevice): boolean
}

class ConcurrentDeviceFactory {
    + createDevice(type: String, name: String, eventSystem: EventSystem): ConcurrentSmartDevice
    + getSupportedTypes(): List<String>
}

' === MONITORING ===
class DeviceStats {
    - deviceName: String
    - onTime: long
    - offTime: long
    - lastStatusChange: LocalDateTime
    - totalStateChanges: int
    + DeviceStats(deviceName: String)
    + recordStateChange(isOn: boolean): void
    + getUptimePercentage(): double
}

' === GUI ===
class SmartHomeGUI {
    - facade: FacadeSmartHome
    + start(stage: Stage): void
    + startGUI(): void
}

' === MAIN & TESTING ===
class Main {
    + main(args: String[]): void
}

class SmartHomeException {
    - message: String
    + SmartHomeException(message: String)
    + SmartHomeException(message: String, cause: Throwable)
}

' === TEST CLASSES ===
class ThermostatTest {
    + testSetTemperature(): void
    + testInvalidTemperature(): void
    + testTurnOn(): void
    + testInvalidName(): void
}

class FacadeSmartHomeTest {
    + testAddDevice(): void
    + testSetTemperature(): void
}

class EventSystemTests {
    + testPublishEvent(): void
    + testEventSubscription(): void
}

class AutomationEngineTest {
    + testAddRule(): void
    + testRuleExecution(): void
}

class DeviceMonitorTest {
    + testMonitorDevices(): void
    + testDeviceStats(): void
}

class PowerMonitoringServiceTest {
    + testOptimizePower(): void
    + testPowerThreshold(): void
}

' === RELATIONSHIPS ===
' Core relationships
FacadeSmartHome "1" --> "1" SmartHome
FacadeSmartHome "1" --> "*" SmartDevice
FacadeSmartHome "1" --> "1" EventSystem
FacadeSmartHome "1" --> "*" Rule

SmartHome "1" --> "1" DeviceManager
SmartHome "1" --> "1" DatabaseService
SmartHome "1" --> "1" SecurityService
SmartHome "1" --> "1" LightAutomationRule

DeviceManager "1" --> "*" SmartDevice
DeviceManager "1" --> "1" DatabaseService
DeviceManager "1" --> "1" SecurityService

' CLI relationships
SmartHomeCLI --> FacadeSmartHome
SmartHomeCLI "1" --> "1" ConcurrentCLICommands
SmartHomeCLI "1" --> "1" PersistenceService

ConcurrentCLICommands --> FacadeSmartHome
ConcurrentCLICommands "1" --> "1" EventSystem
ConcurrentCLICommands "1" --> "1" AutomationEngine
ConcurrentCLICommands "1" --> "1" DeviceMonitor
ConcurrentCLICommands "1" --> "1" PowerMonitoringService
ConcurrentCLICommands "1" --> "1" ConcurrentDeviceFactory

' Concurrent system relationships
EventSystem "1" --> "*" EventListener
EventSystem "1" --> "*" Event

AutomationEngine --> FacadeSmartHome
AutomationEngine "1" --> "*" ConcurrentRule

DeviceMonitor --> FacadeSmartHome
DeviceMonitor --> EventSystem
DeviceMonitor "1" --> "*" DeviceStats

PowerMonitoringService --> FacadeSmartHome
PowerMonitoringService --> EventSystem

' Device inheritance
SmartDevice <|-- Light
SmartDevice <|-- Thermostat
SmartDevice <|-- SecurityCamera
SmartDevice <|.. ConcurrentSmartDevice
ConcurrentSmartDevice <|.. ConcurrentLight
ConcurrentSmartDevice <|.. ConcurrentThermostat
ConcurrentSmartDevice <|.. ConcurrentSecurityCamera
Controllable <|.. SmartDevice

' Automation relationships
AutomationRule <|.. LightAutomationRule
ConcurrentRule <|.. SecurityRule
ConcurrentRule <|.. TemperatureRule
ConcurrentRule <|.. TimeBasedRule
Rule <|.. SecurityRule
Rule <|.. TemperatureRule
Rule <|.. TimeBasedRule

' Configuration relationships
AutomationRuleConfig "1" *-- "*" Condition
AutomationRuleConfig "1" *-- "*" Action

' Service relationships
PersistenceService --> DatabaseService
PersistenceService --> SmartDevice
ConcurrentDeviceFactory --> ConcurrentSmartDevice
ConcurrentDeviceFactory --> EventSystem

' GUI relationship
SmartHomeGUI --> FacadeSmartHome

' Exception relationships
SmartHomeException <.. FacadeSmartHome
SmartHomeException <.. SmartHome
SmartHomeException <.. DeviceManager
SmartHomeException <.. DatabaseService
SmartHomeException <.. Thermostat
SmartHomeException <.. SmartHomeCLI
SmartHomeException <.. ConcurrentCLICommands

' Test relationships
ThermostatTest --> Thermostat
FacadeSmartHomeTest --> FacadeSmartHome
EventSystemTests --> EventSystem
AutomationEngineTest --> AutomationEngine
DeviceMonitorTest --> DeviceMonitor
PowerMonitoringServiceTest --> PowerMonitoringService

' Entry point
Main --> FacadeSmartHome

@enduml